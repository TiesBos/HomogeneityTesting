// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// generate_panel_data
Rcpp::DataFrame generate_panel_data(int N, int tt, double beta, double sigma);
RcppExport SEXP _HomogeneityTest_generate_panel_data(SEXP NSEXP, SEXP ttSEXP, SEXP betaSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type tt(ttSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_panel_data(N, tt, beta, sigma));
    return rcpp_result_gen;
END_RCPP
}
// probit_log_likelihood
double probit_log_likelihood(const std::vector<double>& beta, std::vector<double>& grad, void* params);
RcppExport SEXP _HomogeneityTest_probit_log_likelihood(SEXP betaSEXP, SEXP gradSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< void* >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_log_likelihood(beta, grad, params));
    return rcpp_result_gen;
END_RCPP
}
// probit_mle
Rcpp::List probit_mle(const arma::mat& X, const arma::vec& Y, int max_iter, double tol);
RcppExport SEXP _HomogeneityTest_probit_mle(SEXP XSEXP, SEXP YSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_mle(X, Y, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// binary_individual_slopes
List binary_individual_slopes(const DataFrame& df, int max_iter, double tol);
RcppExport SEXP _HomogeneityTest_binary_individual_slopes(SEXP dfSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(binary_individual_slopes(df, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// param_bootstrap_data
DataFrame param_bootstrap_data(DataFrame df, arma::vec beta);
RcppExport SEXP _HomogeneityTest_param_bootstrap_data(SEXP dfSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(param_bootstrap_data(df, beta));
    return rcpp_result_gen;
END_RCPP
}
// boot_function
NumericVector boot_function(DataFrame df, int B, List null_model);
RcppExport SEXP _HomogeneityTest_boot_function(SEXP dfSEXP, SEXP BSEXP, SEXP null_modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< List >::type null_model(null_modelSEXP);
    rcpp_result_gen = Rcpp::wrap(boot_function(df, B, null_model));
    return rcpp_result_gen;
END_RCPP
}
// quantile_func
double quantile_func(arma::vec vec, double prob);
RcppExport SEXP _HomogeneityTest_quantile_func(SEXP vecSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< double >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(quantile_func(vec, prob));
    return rcpp_result_gen;
END_RCPP
}
// bootstrap_procedure
List bootstrap_procedure(DataFrame df, int B, int max_iter, double tol);
RcppExport SEXP _HomogeneityTest_bootstrap_procedure(SEXP dfSEXP, SEXP BSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrap_procedure(df, B, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HomogeneityTest_generate_panel_data", (DL_FUNC) &_HomogeneityTest_generate_panel_data, 4},
    {"_HomogeneityTest_probit_log_likelihood", (DL_FUNC) &_HomogeneityTest_probit_log_likelihood, 3},
    {"_HomogeneityTest_probit_mle", (DL_FUNC) &_HomogeneityTest_probit_mle, 4},
    {"_HomogeneityTest_binary_individual_slopes", (DL_FUNC) &_HomogeneityTest_binary_individual_slopes, 3},
    {"_HomogeneityTest_param_bootstrap_data", (DL_FUNC) &_HomogeneityTest_param_bootstrap_data, 2},
    {"_HomogeneityTest_boot_function", (DL_FUNC) &_HomogeneityTest_boot_function, 3},
    {"_HomogeneityTest_quantile_func", (DL_FUNC) &_HomogeneityTest_quantile_func, 2},
    {"_HomogeneityTest_bootstrap_procedure", (DL_FUNC) &_HomogeneityTest_bootstrap_procedure, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_HomogeneityTest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
